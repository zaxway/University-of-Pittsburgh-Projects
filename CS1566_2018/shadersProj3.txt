Fragment Shader
__________________

#version 120

uniform vec4 AmbientProduct, DiffuseProduct, SpecularProduct;
uniform mat4 model_view;
uniform float shininess;
uniform float attenuation_constant, attenuation_linear, attenuation_quadratic;
vec4 ambient, diffuse, specular;

varying vec4 N;
varying vec4 L;
varying vec4 E;
varying float distance;

void main()
{
    vec4 NN = normalize(N);
    vec4 EE = normalize(E);
    vec4 LL = normalize(L);
    ambient = AmbientProduct;
    vec4 H = normalize(LL + EE);
    diffuse = max(dot(LL, NN), 0.0) * DiffuseProduct;
    specular = pow(max(dot(NN, H), 0.0), shininess) * SpecularProduct;
    float attenuation = 1/(attenuation_constant + (attenuation_linear * distance) +
                           (attenuation_quadratic * distance * distance));
    gl_FragColor = ambient + attenuation * (diffuse + specular);
}



Vertex Shader
__________________

#version 120

attribute vec4 vPosition;
attribute vec4 vColor;
attribute vec4 vNormal;
varying vec4 color;

uniform mat4 model_view, projection;
uniform vec4 AmbientProduct, DiffuseProduct, SpecularProduct, LightPosition;
uniform float shininess, attenuation_constant, attenuation_linear, attenuation_quadratic;
vec4 ambient, diffuse, specular;

void main() {

    ambient = AmbientProduct;
    vec4 N = normalize(model_view * vNormal);
    vec4 L_temp = model_view * (LightPosition - vPosition);
    vec4 L = normalize(L_temp);
    diffuse = max(dot(L,N), 0.0) * DiffuseProduct;
    vec4 EyePoint = vec4(0.0, 0.0, 0.0, 1.0);
    vec4 V = normalize(EyePoint - (model_view * vPosition));
    vec4 H = normalize(L + V);
    specular = pow(max(dot(N, H), 0.0), shininess) * SpecularProduct;
    float distance = length(L_temp);
    float attenuation = 1/(attenuation_constant + (attenuation_linear * distance) +
                           (attenuation_quadratic * distance * distance));
    color = ambient + (attenuation * (diffuse + specular));
    gl_Position = projection * model_view * vPosition;

}



Vshader From the book
__________________

#version 120

attribute vec4 vPosition;
attribute vec4 vNormal;
varying vec4 color;

uniform mat4 model_view, projection;
uniform vec4 AmbientProduct, DiffuseProduct, SpecularProduct, LightPosition;
uniform float shininess;
vec4 ambient, diffuse, specular;

void main() {

//    ambient = AmbientProduct;
//    vec4 N = normalize(vNormal);
//    vec4 L_temp = (LightPosition - (model_view * vPosition));
//    vec4 L = normalize(L_temp);
//    vec4 E = -normalize(model_view * vPosition);
//    vec4 H = normalize(L + E);
//    diffuse = max(dot(L,N), 0.0) * DiffuseProduct;
//    specular = max(pow(max(dot(N, H), 0.0), shininess) * SpecularProduct, 0.0);
//    color = ambient + diffuse + specular;
//    color.w = 1.0;
    gl_Position = projection * model_view * vPosition;

}
